{"version":3,"sources":["webpack:///./src/pages/villagers.js"],"names":["useStyles","makeStyles","theme","list","marginBottom","spacing","subheader","backgroundColor","palette","background","paper","customPagination","flexShrink","marginLeft","controlsWrapper","margin","position","formControl","width","transform","searchInput","paddingLeft","searchIcon","left","top","color","text","hint","pagination","padding","TablePaginationActions","props","classes","useTheme","count","page","rowsPerPage","onChangePage","className","onClick","event","disabled","aria-label","direction","Math","ceil","max","VillagersPage","allVillagers","useVillagers","React","useState","setPage","villagersPerPage","setVillagersPerPage","searchTerms","setSearchTerms","searchResults","matchSorter","keys","item","personality","species","startIndex","endIndex","length","villagersToRender","slice","pageLabel","pageTitle","title","pathname","location","fullWidth","id","label","type","variant","value","inputProps","onChange","e","target","map","villager","key","component","rowsPerPageOptions","SelectProps","native","newPage","onChangeRowsPerPage","parseInt","labelRowsPerPage","ActionsComponent"],"mappings":"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","file":"component---src-pages-villagers-js-7a8dc8b04843e7d09ddd.js","sourcesContent":["import React from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport matchSorter from \"match-sorter\";\nimport List from \"@material-ui/core/List\";\nimport TextField from \"@material-ui/core/TextField\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nimport useVillagers from \"../hooks/useVillagers\";\nimport VillagerListItem from \"../components/VillagerListItem\";\nimport Page from \"../components/Page\";\nimport SEO from \"../components/SEO\";\n\nconst useStyles = makeStyles(theme => ({\n    list: {\n        marginBottom: theme.spacing(2),\n    },\n    subheader: {\n        backgroundColor: theme.palette.background.paper,\n    },\n    customPagination: {\n        flexShrink: 0,\n        marginLeft: theme.spacing(2.5),\n    },\n    controlsWrapper: {\n        margin: theme.spacing(2, 5, 1),\n        position: \"relative\",\n    },\n    formControl: {\n        width: \"100%\",\n        margin: 0,\n        \"& .MuiInputLabel-outlined\": {\n            transform: `translate(48px, 20px) scale(1)`,\n        },\n        \"& .MuiInputLabel-outlined.MuiInputLabel-shrink\": {\n            transform: `translate(14px, -6px) scale(0.75)`,\n        },\n    },\n    searchInput: {\n        paddingLeft: theme.spacing(6),\n    },\n    searchIcon: {\n        position: \"absolute\",\n        left: theme.spacing(2),\n        top: \"50%\",\n        transform: \"translateY(-50%)\",\n        color: theme.palette.text.hint,\n    },\n    pagination: {\n        \"& .MuiTablePagination-toolbar\": {\n            padding: 0,\n        },\n    },\n}));\n\nfunction TablePaginationActions(props) {\n    const classes = useStyles();\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onChangePage } = props;\n\n    const handleFirstPageButtonClick = event => {\n        onChangePage(event, 0);\n    };\n\n    const handleBackButtonClick = event => {\n        onChangePage(event, page - 1);\n    };\n\n    const handleNextButtonClick = event => {\n        onChangePage(event, page + 1);\n    };\n\n    const handleLastPageButtonClick = event => {\n        onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n    };\n\n    return (\n        <div className={classes.customPagination}>\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n                aria-label=\"first page\"\n            >\n                {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n            </IconButton>\n            <IconButton\n                onClick={handleBackButtonClick}\n                disabled={page === 0}\n                aria-label=\"previous page\"\n            >\n                {theme.direction === \"rtl\" ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"next page\"\n            >\n                {theme.direction === \"rtl\" ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"last page\"\n            >\n                {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n            </IconButton>\n        </div>\n    );\n}\n\nexport default function VillagersPage(props) {\n    const classes = useStyles();\n    const { allVillagers } = useVillagers();\n    const [page, setPage] = React.useState(0);\n    const [villagersPerPage, setVillagersPerPage] = React.useState(10);\n    const [searchTerms, setSearchTerms] = React.useState(\"\");\n    const searchResults = matchSorter(allVillagers, searchTerms, {\n        keys: [\n            \"name\",\n            \"species\",\n            \"personality\",\n            item => `${item.personality} ${item.species}`,\n            item => `${item.species} ${item.personality}`,\n            \"gender\",\n        ],\n    });\n    const startIndex = Math.max(page * villagersPerPage, 0);\n    const endIndex = startIndex + (villagersPerPage >= 0 ? villagersPerPage : searchResults.length);\n    const villagersToRender = searchResults.slice(startIndex, endIndex);\n    const pageTitle = \"Browse Villagers\";\n    const pageLabel = `${pageTitle} (${searchResults.length})`;\n    return (\n        <Page title={pageLabel}>\n            <SEO title={pageTitle} pathname={props.location.pathname} />\n            <div className={classes.controlsWrapper}>\n                <TextField\n                    className={classes.formControl}\n                    fullWidth={true}\n                    id=\"villager-search\"\n                    label=\"Name, species, personality\"\n                    type=\"search\"\n                    variant=\"outlined\"\n                    value={searchTerms}\n                    inputProps={{ className: classes.searchInput }}\n                    onChange={e => {\n                        setSearchTerms(e.target.value);\n                        setPage(0);\n                    }}\n                />\n                <SearchIcon className={classes.searchIcon} />\n            </div>\n            <List className={classes.list}>\n                {villagersToRender.map(villager => (\n                    <VillagerListItem\n                        key={villager.id}\n                        villager={villager}\n                    />\n                ))}\n            </List>\n            <TablePagination\n                className={classes.pagination}\n                component=\"div\"\n                rowsPerPageOptions={[10, 25, 50, { label: \"All\", value: -1 }]}\n                count={searchResults.length}\n                rowsPerPage={villagersPerPage}\n                page={page}\n                SelectProps={{\n                    inputProps: { \"aria-label\": \"villagers per page\" },\n                    native: true,\n                }}\n                onChangePage={(event, newPage) => {\n                    setPage(newPage);\n                }}\n                onChangeRowsPerPage={event => {\n                    setVillagersPerPage(parseInt(event.target.value, 10));\n                    setPage(0);\n                }}\n                labelRowsPerPage=\"\"\n                ActionsComponent={TablePaginationActions}\n            />\n        </Page>\n    );\n}\n"],"sourceRoot":""}