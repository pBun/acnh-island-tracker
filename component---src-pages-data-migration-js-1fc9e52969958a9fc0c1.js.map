{"version":3,"sources":["webpack:///./src/pages/data/migration.js"],"names":["useStyles","makeStyles","theme","list","paddingTop","spacing","paddingBottom","heading","padding","container","textArea","width","resize","display","textField","NotFoundPage","props","classes","React","useContext","SessionContext","session","overrideSessionData","useState","yerNewKey","setYerNewKey","error","setError","yerKey","JSON","stringify","yerKeyEl","useRef","useEffect","title","pathname","location","className","variant","ref","readOnly","rows","value","trim","onClick","current","focus","select","document","execCommand","err","onChange","e","target","helperText","window","confirm","json","healSessionShape","parse","toString"],"mappings":"mOAUMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,WAAYF,EAAMG,QAAQ,GAC1BC,cAAeJ,EAAMG,QAAQ,IAEjCE,QAAS,CACLC,QAASN,EAAMG,QAAQ,EAAG,EAAG,IAEjCI,UAAW,CACPD,QAASN,EAAMG,QAAQ,EAAG,EAAG,IAEjCK,SAAU,CACNC,MAAO,OACPC,OAAQ,OACRC,QAAS,SAEbC,UAAW,CACPH,MAAO,OACPC,OAAQ,YAqEDG,UAlEf,SAAsBC,GAClB,IAAMC,EAAUjB,IADS,EAEgBkB,IAAMC,WAAWC,KAAlDC,EAFiB,EAEjBA,QAASC,EAFQ,EAERA,oBAFQ,EAGSJ,IAAMK,SAAS,IAA1CC,EAHkB,KAGPC,EAHO,OAICP,IAAMK,SAAS,IAAlCG,EAJkB,KAIXC,EAJW,KAKnBC,EAASC,KAAKC,UAAUT,GACxBU,EAAWb,IAAMc,OAAO,MAK9B,OAJAd,IAAMe,WAAU,WACZR,EAAa,MACd,IAGC,kBAAC,IAAD,CAAMS,MAFQ,aAGV,kBAAC,IAAD,CAAKA,MAHK,YAGaC,SAAUnB,EAAMoB,SAASD,WAChD,kBAAC,IAAD,CAAYE,UAAWpB,EAAQV,QAAS+B,QAAQ,MAAhD,+DAGA,yBAAKD,UAAWpB,EAAQR,WACpB,8BACI4B,UAAWpB,EAAQP,SACnB6B,IAAKR,EACLS,UAAU,EACVC,KAAK,KACLC,MAAOd,EAASA,EAAOe,OAASf,IAEpC,kBAAC,IAAD,CACIgB,QAAS,WACLb,EAASc,QAAQC,QACjBf,EAASc,QAAQE,SACjB,IACIC,SAASC,YAAY,QACvB,MAAOC,OANjB,QAWA,kBAAC,IAAD,CACIb,UAAWpB,EAAQH,UACnBwB,QAAQ,WACRa,SAAU,SAACC,GACP3B,EAAa2B,EAAEC,OAAOX,MAAMC,QAC5BhB,EAAS,KAEbD,QAASA,EACT4B,WAAY5B,IAEhB,kBAAC,IAAD,CACIkB,QAAS,WACL,GAAKpB,EACL,IACI,GAAI+B,QAAUA,OAAOC,QAAQ,yEACrBD,OAAOC,QAAQ,yFAA0F,CACzG,IAAMC,EAAOC,YAAiB7B,KAAK8B,MAAMnC,IACzCF,EAAoBmC,IAG9B,MAAMP,GACJvB,EAASuB,EAAIU,eAXzB","file":"component---src-pages-data-migration-js-1fc9e52969958a9fc0c1.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport SessionContext, { healSessionShape } from \"../../context/SessionContext\";\nimport Page from \"../../components/Page\";\nimport SEO from \"../../components/SEO\";\n\nconst useStyles = makeStyles(theme => ({\n    list: {\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(4),\n    },\n    heading: {\n        padding: theme.spacing(2, 5, 4),\n    },\n    container: {\n        padding: theme.spacing(0, 5, 4),\n    },\n    textArea: {\n        width: \"100%\",\n        resize: \"none\",\n        display: \"block\",\n    },\n    textField: {\n        width: \"100%\",\n        resize: \"none\",\n    },\n}));\nfunction NotFoundPage(props) {\n    const classes = useStyles();\n    const { session, overrideSessionData } = React.useContext(SessionContext);\n    const [yerNewKey, setYerNewKey] = React.useState('');\n    const [error, setError] = React.useState('');\n    const yerKey = JSON.stringify(session);\n    const yerKeyEl = React.useRef(null);\n    React.useEffect(() => {\n        setYerNewKey(''); // hack to trigger re-render\n    }, []);\n    const pageTitle = \"Migration\";\n    return (\n        <Page title={pageTitle}>\n            <SEO title={pageTitle} pathname={props.location.pathname} />\n            <Typography className={classes.heading} variant=\"h4\">\n                PLEASE ONLY USE THIS PAGE IF YOU KNOW WHAT YOU ARE DOING!!!\n            </Typography>\n            <div className={classes.container}>\n                <textarea\n                    className={classes.textArea}\n                    ref={yerKeyEl}\n                    readOnly={true}\n                    rows=\"10\"\n                    value={yerKey ? yerKey.trim() : yerKey}\n                />\n                <Button\n                    onClick={() => {\n                        yerKeyEl.current.focus();\n                        yerKeyEl.current.select();\n                        try {\n                            document.execCommand(\"copy\");\n                        } catch (err) {\n\n                        }\n                    }}\n                >Copy</Button>\n                <TextField\n                    className={classes.textField}\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                        setYerNewKey(e.target.value.trim());\n                        setError('');\n                    }}\n                    error={!!error}\n                    helperText={error}\n                />\n                <Button\n                    onClick={() => {\n                        if (!yerNewKey) return;\n                        try {\n                            if (window && window.confirm(\"Are you sure you want to overwrite ALL of your saved data with this?\")) {\n                                if (window.confirm(\"Are you absolutely sure? This includes residents, past residents, and ALL encounters.\")) {\n                                    const json = healSessionShape(JSON.parse(yerNewKey));\n                                    overrideSessionData(json);\n                                }\n                            }\n                        } catch(err) {\n                            setError(err.toString());\n                        }\n                    }}\n                >Import</Button>\n            </div>\n        </Page>\n    );\n};\n\nexport default NotFoundPage;\n"],"sourceRoot":""}