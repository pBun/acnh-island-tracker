{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/pages/404.js"],"names":["SEO","props","description","lang","meta","title","pathname","site","metaTitle","siteMetadata","metaDescription","metaUrl","siteUrl","htmlAttributes","name","content","property","author","concat","rel","href","defaultProps","useStyles","makeStyles","theme","text","padding","spacing","NotFoundPage","classes","location","variant","className"],"mappings":"4IAYA,SAASA,EAAIC,GAAQ,IACTC,EAA6CD,EAA7CC,YAAaC,EAAgCF,EAAhCE,KAAMC,EAA0BH,EAA1BG,KAAMC,EAAoBJ,EAApBI,MAAOC,EAAaL,EAAbK,SAChCC,EAFQ,OAERA,KAcFC,EAAYH,EAAWA,EAAN,MAAiBE,EAAKE,aAAaJ,MAAUE,EAAKE,aAAaJ,MAChFK,EAAkBR,GAAeK,EAAKE,aAAaP,YACnDS,EAAO,GAAMJ,EAAKE,aAAaG,QAAUN,EAC/C,OACI,kBAAC,IAAD,CACIO,eAAgB,CACZV,QAEJE,MAAOG,EACPJ,KAAM,CACF,CACIU,KAAM,cACNC,QAASL,GAEb,CACIM,SAAU,WACVD,QAASP,GAEb,CACIQ,SAAU,iBACVD,QAASL,GAEb,CACIM,SAAU,UACVD,QAAS,WAEb,CACIC,SAAU,SACVD,QAAQ,GAAIJ,GAEhB,CACIG,KAAM,eACNC,QAAS,WAEb,CACID,KAAM,kBACNC,QAASR,EAAKE,aAAaQ,QAE/B,CACIH,KAAM,gBACNC,QAASP,GAEb,CACIM,KAAM,sBACNC,QAASL,IAEfQ,OAAOd,IAET,0BAAMe,IAAI,YAAYC,KAAMT,KAKxCX,EAAIqB,aAAe,CACflB,KAAM,KACNC,KAAM,GACNF,YAAa,GACbG,MAAO,IAWIL,O,sVChGf,gFAKMsB,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,QAASF,EAAMG,QAAQ,EAAG,EAAG,QAkBtBC,UAff,SAAsB3B,GAClB,IAAM4B,EAAUP,IAEhB,OACI,kBAAC,IAAD,CAAMjB,MAFQ,kBAGV,kBAAC,IAAD,CAAKA,MAHK,iBAGaC,SAAUL,EAAM6B,SAASxB,WAChD,kBAAC,IAAD,CAAYyB,QAAQ,QAAQC,UAAWH,EAAQJ,MAA/C","file":"component---src-pages-404-js-004485a597eec09c2c01.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Helmet } from \"react-helmet\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nfunction SEO(props) {\n    const { description, lang, meta, title, pathname } = props;\n    const { site } = useStaticQuery(\n        graphql`\n            query {\n                site {\n                    siteMetadata {\n                        title\n                        description\n                        author\n                        siteUrl\n                    }\n                }\n            }\n        `\n    );\n    const metaTitle = title ? `${title} | ${site.siteMetadata.title}` : site.siteMetadata.title;\n    const metaDescription = description || site.siteMetadata.description;\n    const metaUrl = `${site.siteMetadata.siteUrl}${pathname}`;\n    return (\n        <Helmet\n            htmlAttributes={{\n                lang,\n            }}\n            title={metaTitle}\n            meta={[\n                {\n                    name: \"description\",\n                    content: metaDescription,\n                },\n                {\n                    property: \"og:title\",\n                    content: metaTitle,\n                },\n                {\n                    property: \"og:description\",\n                    content: metaDescription,\n                },\n                {\n                    property: \"og:type\",\n                    content: \"website\",\n                },\n                {\n                    property: \"og:url\",\n                    content: `${metaUrl}`,\n                },\n                {\n                    name: \"twitter:card\",\n                    content: \"summary\",\n                },\n                {\n                    name: \"twitter:creator\",\n                    content: site.siteMetadata.author,\n                },\n                {\n                    name: \"twitter:title\",\n                    content: metaTitle,\n                },\n                {\n                    name: \"twitter:description\",\n                    content: metaDescription,\n                },\n            ].concat(meta)}\n        >\n            <link rel=\"canonical\" href={metaUrl} />\n        </Helmet>\n    );\n}\n\nSEO.defaultProps = {\n    lang: \"en\",\n    meta: [],\n    description: '',\n    title: '',\n};\n\nSEO.propTypes = {\n    description: PropTypes.string,\n    lang: PropTypes.string,\n    meta: PropTypes.arrayOf(PropTypes.object),\n    title: PropTypes.string,\n    pathname: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Page from \"../components/Page\";\nimport SEO from \"../components/SEO\";\nconst useStyles = makeStyles(theme => ({\n    text: {\n        padding: theme.spacing(3, 5, 5),\n    },\n}));\nfunction NotFoundPage(props) {\n    const classes = useStyles();\n    const pageTitle = \"404: Not Found\";\n    return (\n        <Page title={pageTitle}>\n            <SEO title={pageTitle} pathname={props.location.pathname} />\n            <Typography variant=\"body1\" className={classes.text}>\n                ...Well there you have it. According to recent feedback, the general sentiment is that\n                this page was not found. Well I think there's only one way to respond to this\n                information... Try one of the other pages in the menu. And there you have it!\n            </Typography>\n        </Page>\n    );\n};\n\nexport default NotFoundPage;\n"],"sourceRoot":""}